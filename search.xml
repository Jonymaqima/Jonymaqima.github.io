<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>验证栈序列</title>
      <link href="/posts/ed77a844.html"/>
      <url>/posts/ed77a844.html</url>
      
        <content type="html"><![CDATA[<h2 id="验证栈序列"><a href="#验证栈序列" class="headerlink" title="验证栈序列"></a>验证栈序列</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定长度为 n 的入栈序列pushed 和长度为 n 的出栈序列 popped，两者均为 1∼n 的排列。初始时栈为空，只允许在栈顶进行插入（入栈）和删除（出栈）操作；若可通过若干操作使出栈顺序等于 popped，则称 popped 为合法出栈序列。</p><p>现有 q 组测试，每组给定对应序列，判断 popped 是否为合法出栈序列。</p><p>【名词解释】</p><p>【排列】</p><p>长度为 n 的 排列 是由 1∼n 的 n 个整数按任意顺序组成的序列，其中每个整数恰好出现一次。</p><p><em>输入描述：</em></p><p>第一行输入整数<br>q(1≦q≦5)，表示测试组数。<br>接下来对于每组测试，依次输入：</p><p>1.一行整数 n (1≦n≦$10^5$)，表示序列长度；</p><p>2.一行 n 个整数，为入栈序列 pushed1,…,pushedn;</p><p>3.一行 n 个整数，为出栈序列 popped1,…,poppedn 。</p><p><em>输出描述：</em> 对于每组测试，输出一行，如果 popped 为合法出栈序列，则输出 Yes；否则输出 No。</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">输出：</span><br><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><em>解题思路</em></h3><ul><li>1.问题要求判断出栈序列是否合法。</li><li>2.解决方法：使用栈来模拟入栈和出栈操作。</li><li>3.栈的使用：使用一个栈来模拟入栈和出栈操作。</li><li>4.栈的维护：在每次入栈操作后，检查栈顶元素是否等于当前出栈元素。如果相等，则将栈顶元素弹出。</li><li>5.出栈操作：在每次出栈操作后，检查栈顶元素是否等于当前出栈元素。如果相等，则将栈顶元素弹出。</li><li>6.循环处理：依次处理入栈序列和出栈序列的元素，直到处理完所有元素。</li><li>7.返回结果：如果栈为空，则说明出栈顺序合法，返回 Yes；否则返回 No。</li><li>8.时间复杂度：O(n)，其中 n 为序列长度。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> in.nextInt(); <span class="comment">// 测试组数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt(); <span class="comment">// 序列长度</span></span><br><span class="line">            <span class="type">int</span>[] pushed = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="type">int</span>[] popped = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                pushed[j] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                popped[j] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建一个栈</span></span><br><span class="line">            Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x : popped)&#123;</span><br><span class="line">                <span class="comment">// 栈顶元素等于当前元素，则将栈顶元素弹出</span></span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty() &amp;&amp; stack.peek() == x)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 栈为空或者栈顶元素不等于当前元素，则将入栈序列的元素依次入栈</span></span><br><span class="line">                    <span class="keyword">while</span> (index &lt; pushed.length &amp;&amp; x != pushed[index])&#123;</span><br><span class="line">                        stack.push(pushed[index]);</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果栈顶元素等于当前元素，则将栈顶元素弹出</span></span><br><span class="line">                    <span class="keyword">if</span>(index &lt; pushed.length &amp;&amp; x == pushed[index])&#123;</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                    <span class="comment">// 栈为空，则说明出栈顺序合法</span></span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>总结：</em> 这道题的关键在于模拟栈的入栈和出栈操作，并判断出栈顺序是否合法。适合新手熟练栈的操作。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动管理停车场桩位系统</title>
      <link href="/posts/4ef763b.html"/>
      <url>/posts/4ef763b.html</url>
      
        <content type="html"><![CDATA[<h2 id="自动管理停车场桩位系统"><a href="#自动管理停车场桩位系统" class="headerlink" title="自动管理停车场桩位系统"></a>自动管理停车场桩位系统</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>你重生了，这一世，学会侧方位停车的人就可以统领全世界。因为大部分车主都不会侧方位停车，所以聪明的你发明了 单车道单出入口停车场，如图所示。这样，虽然停在最里面的车的车主要想驶离停车场，就必须要先等到后面的车全部驶离，但至少避免了高难度的侧方位停车，实在是利国利民的伟业！</p><p>聪明的你决定再编写一个自动管理停车场桩位系统，可以处理以下四种信息： </p><ul><li><p>1.<em>有车靠近</em>：此时，传感器会向你的程序发起函数 top() 的调用，你的程序需要返回目前单车道停车场里最靠近出&#x2F;入口位置（即图中停车位编号最大的有车位置）的车辆的车辆编号。</p></li><li><p>2.<em>有车驶入</em>：此时，传感器会自动识别出该车的车辆编号x（1≦x≦109），并向你的程序发起函数push(x) 的调用，你的程序需要记录下这辆车驶入的信息，随后该车将会默认停在该停车场里离出&#x2F;入口位置最远的车位（即图中停车位编号最小的无车位置）。</p></li><li><p>3.<em>有车驶离</em>：此时，传感器不会识别出该车的车辆编号，而是直接向你的程序发起函数 pop() 的调用，你的程序需要先搞明白是哪辆车驶离了，然后记录下这辆车驶离的信息。</p></li><li><p>4.<em>此时，这个无聊的人会向你的传感器提问</em>: “目前停车场内车辆编号最小的车的编号是多少？”，传感器显然不知道答案，所以会直接向你的程序发起函数<br>min() 的调用，你的程序需要计算出这个无聊的人提问的结果，并作为返回值传递给传感器，从而把这个无聊的人打发走。</p></li></ul><p>测试数据保证传感器调用函数的总次数不超过<br>$10^4$ ，虽然如此，建议您尝试让每个函数的调用时间复杂度优化到 O(1)。</p><p><strong>示例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"> [<span class="string">&quot;PSH-1&quot;</span>,<span class="string">&quot;PSH2&quot;</span>,<span class="string">&quot;MIN&quot;</span>,<span class="string">&quot;TOP&quot;</span>,<span class="string">&quot;POP&quot;</span>,<span class="string">&quot;PSH1&quot;</span>,<span class="string">&quot;TOP&quot;</span>,<span class="string">&quot;MIN&quot;</span>]</span><br><span class="line">返回值：</span><br><span class="line">-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">1</span></span><br></pre></td></tr></table></figure><p><em>说明</em> </p><ul><li>“PSH-1”表示编号为 -1 的车驶入了停车场，停车场中车辆编号依次为为：-1</li><li>“PSH2”表示编号为 2 的车驶入了停车场，停车场中车辆编号依次为为：2 -1</li><li>“MIN”表示获取此时停车场中最小车辆编号&#x3D;&#x3D;&gt;返回 -1</li><li>“TOP”表示获取车辆编号最外侧车辆的编号&#x3D;&#x3D;&gt;返回 2</li><li>“POP”表示车辆 2 驶离了停车场，停车场中车辆编号依次为为：-1</li><li>“PSH1”表示编号为 1 的车驶入了停车场，停车场中车辆编号依次为为：1 -1</li><li>“TOP”表示获取车辆编号最外侧车辆的编号&#x3D;&#x3D;&gt;返回 1</li><li>“MIN”表示获取此时停车场中最小车辆编号&#x3D;&#x3D;&gt;返回 -1</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><em>解题思路</em></h3><ul><li>1.创建两个栈，一个栈用于存储停车场中的车辆编号，另一个栈用于存储停车场中的车辆编号的最小值。</li><li>2.在入栈操作中，将当前车辆编号入栈，并判断当前车辆编号是否小于栈顶的最小值，如果是则将当前车辆编号入栈。</li><li>3.在出栈操作中，将栈顶元素出栈，并判断栈顶元素是否等于栈顶的最小值，如果是则将栈顶的最小值出栈。</li><li>4.在获取停车场中最小车辆编号操作中，返回停车场中的最小值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();<span class="comment">// 栈顶元素为最小值</span></span><br><span class="line">    <span class="comment">// 栈的入栈操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> node)</span> &#123;</span><br><span class="line">        stack.push(node);</span><br><span class="line">        <span class="keyword">if</span>(minStack.isEmpty() || minStack.peek()&gt;=node)&#123;</span><br><span class="line">            minStack.push(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 栈的出栈操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(node == minStack.peek())&#123;</span><br><span class="line">            minStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取停车场中车辆编号最外侧车辆的编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取此时停车场中最小车辆编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>说明：</em> 用两个栈实现停车场管理，时间复杂度O(1)，空间复杂度O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和排序</title>
      <link href="/posts/9fe671ff.html"/>
      <url>/posts/9fe671ff.html</url>
      
        <content type="html"><![CDATA[<h2 id="栈和排序"><a href="#栈和排序" class="headerlink" title="栈和排序"></a>栈和排序</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个从 1 到 n 的排列 P，以及一个空栈。你按顺序将排列中的元素依次入栈，可以在任意时刻选择将栈顶元素出栈并将其加入输出序列。入栈顺序不可改变。</p><p>理想情况下，你想得到一个严格从大到小排序的输出序列<br>n,n−1,…,1但受栈操作限制可能无法实现。当无法完全排序时，请输出<strong>字典序</strong>最大的合法出栈序列。</p><p><strong>输入描述：</strong><br>在一行中输入一个整数<br>n (1≦n≦106)(1≦n≦10 6 )。<br>第二行输入 n 个整数，表示排列 P 中的元素，用空格分隔。保证给出的是一个从 1 到 n 的排列。</p><p><strong>输出描述：</strong><br>输出一行，包含若干整数，表示最终的出栈序列，用空格分隔，结尾不输出多余空格。</p><p><strong>示例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">输出：</span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><em>解题思路</em></h3><p><em><strong>问题分析</strong></em></p><ul><li>1.目标：生成一个字典序最大的合法出栈序列。</li><li>2.限制：入栈顺序固定，出栈操作可以在任意时刻进行。</li><li>3.字典序最大：在无法完全按从大到小排序的情况下，生成的序列在字典序上尽可能大。</li></ul><p><em><strong>算法思路</strong></em></p><ul><li>1.栈的使用：使用一个栈来模拟入栈和出栈操作。</li><li>2.贪心策略：在每次入栈后，检查栈顶元素是否可以出栈。如果栈顶元素是当前期望的输出值（即从大到小的序列中的下一个值），则将其出栈并加入输出序列。</li><li>3.维护期望值：用一个变量 expect 来记录当前期望的输出值，初始值为 n。</li><li>4.循环处理：依次处理排列中的每个元素，直到所有元素都处理完毕</li></ul><p><em><strong>解决方法</strong></em></p><ul><li>1.创建一个栈，一个输出序列，一个期望的元素，一个输出序列的索引</li><li>2.遍历排列P，将每个元素入栈</li><li>3.如果栈顶元素等于期望的元素，则将栈顶元素弹出并加入输出序列</li><li>4.如果栈顶元素不等于期望的元素，则将栈顶元素加入输出序列，并更新期望的元素为栈顶元素减1</li><li>5.重复步骤2-4，直到遍历完排列P</li><li>6.将剩余的栈元素按顺序加入输出序列</li><li>7.返回输出序列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] maxLexicographicalSequence(<span class="type">int</span> n, <span class="type">int</span>[] P) &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">expect</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">outputIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶开始比较栈顶元素和当前元素，如果相等则将栈顶元素弹出并加入输出序列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : P) &#123;</span><br><span class="line">            stack.push(num);</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == expect) &#123;</span><br><span class="line">                output[outputIndex++] = stack.pop();</span><br><span class="line">                expect--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将栈中剩余的元素按顺序加入输出序列</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            output[outputIndex++] = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法可实现栈和排序问题，返回一个字典序最大的合法出栈序列。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 贪心算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数计算器</title>
      <link href="/posts/92d5d8a2.html"/>
      <url>/posts/92d5d8a2.html</url>
      
        <content type="html"><![CDATA[<h2 id="整数计算器，实现加减乘除"><a href="#整数计算器，实现加减乘除" class="headerlink" title="整数计算器，实现加减乘除"></a>整数计算器，实现加减乘除</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p> 请写一个整数计算器，支持加减乘三种运算和括号。<br>数据范围：<br>0≤∣s∣≤100<br>0≤∣s∣≤100，保证计算结果始终在整型范围内<br>要求：空间复杂度： O(n)，时间复杂度 O(n)</p><p><strong>示例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="string">&quot;1+2&quot;</span></span><br><span class="line">返回值：<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="string">&quot;3+2*3*4-1&quot;</span></span><br><span class="line">返回值：<span class="number">26</span></span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="string">&quot;(2*(3-4))*5&quot;</span></span><br><span class="line">返回值：-<span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><em>解题思路</em></h3><ul><li>1.创建两个栈，一个栈存放数字，一个栈存放运算符，栈顶的数字为当前结果，栈顶的运算符为当前运算符</li><li>2.遍历字符串，如果是数字则入数字栈，如果是运算符则入运算符栈</li><li>3.如果当前字符是数字，则将其转为数字并入数字栈</li><li>4.如果当前字符是运算符，则判断当前运算符的优先级和栈顶运算符的优先级，如果当前运算符的优先级高，则将栈顶运算符弹出并计算，直到栈顶运算符的优先级低于当前运算符的优先级或者栈为空</li><li>5.如果当前字符是括号，则判断括号是否匹配，如果匹配则将栈顶运算符弹出并计算，直到栈顶运算符为左括号或者栈为空</li><li>6.返回数字栈的栈顶元素即为结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整数计算器 Java 8</span></span><br><span class="line"><span class="comment"> * 仅处理整数,四则运算，括号，正负号</span></span><br><span class="line"><span class="comment"> * 扩展功能改相应工具方法即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">solve</span><span class="params">(String s)</span> &#123;</span><br><span class="line">   <span class="type">Strning</span> <span class="variable">str</span> <span class="operator">=</span> s.replaceAl(<span class="string">&quot;\\s+&quot;</span> , <span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();</span><br><span class="line">   Deque&lt;Integer&gt; numStack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();<span class="comment">// 数字栈</span></span><br><span class="line">   Deque&lt;Character&gt; opStack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;(); <span class="comment">// 运算符栈</span></span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">     <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">     <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 获取多位数字</span></span><br><span class="line">      <span class="keyword">while</span> (i &lt; len &amp;&amp; Character.isDigit(str.charAt(i))) &#123;</span><br><span class="line">        val = val * <span class="number">10</span> + str.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      numStack.push(val);</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">      opStack.push(c);<span class="comment">// 左括号入栈</span></span><br><span class="line">      i++;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 括号匹配,同时计算括号内的结果</span></span><br><span class="line">      <span class="keyword">while</span> (!opStack.isEmpty() &amp;&amp; opStack.peek() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        calculate(numStack, opStack);</span><br><span class="line">      &#125;</span><br><span class="line">      opStack.pop();<span class="comment">// 弹出左括号</span></span><br><span class="line">      i++;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span>(isOperator(c))&#123;</span><br><span class="line">      <span class="comment">// 处理一元正负号，出现在开头或(之后,入栈0</span></span><br><span class="line">      <span class="keyword">if</span>((i==<span class="number">0</span> || str.charAt(i-<span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>) &amp;&amp; (c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;+&#x27;</span>))&#123;</span><br><span class="line">        numStack.push(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 先运算符优先级高的</span></span><br><span class="line">      <span class="keyword">while</span> (!opStack.isEmpty() &amp;&amp; getPriority(opStack.peek()) &gt;= getPriority(c)) &#123;</span><br><span class="line">        calculate(numStack, opStack);</span><br><span class="line">      &#125;</span><br><span class="line">      opStack.push(c);</span><br><span class="line">      i++;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Invalid character: &quot;</span> + c);</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 栈中剩余的运算符进行运算</span></span><br><span class="line">   <span class="keyword">while</span> (!opStack.isEmpty()) &#123;</span><br><span class="line">    calculate(numStack, opStack);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 返回结果</span></span><br><span class="line">   <span class="keyword">return</span> numStack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----工具方法---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算符计算</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">(Deque&lt;Integer&gt; numStack, Deque&lt;Character&gt; opStack)</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> numStack.pop();</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> numStack.pop();</span><br><span class="line">  <span class="keyword">switch</span> (opStack.pop()) &#123;&#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: numStack.push(a + b);<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: numStack.push(a - b);<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: numStack.push(a * b);<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: numStack.push(a / b);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取运算符优先级</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">(<span class="type">char</span> op)</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 非运算符&#x27;(&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为运算符</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isOperator</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 运算符优先级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装教程</title>
      <link href="/posts/d95d7e09.html"/>
      <url>/posts/d95d7e09.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-教程"><a href="#Hexo-教程" class="headerlink" title="Hexo 教程"></a>Hexo 教程</h2><p>首先新建一个文件夹用来存放博客的配置文件，在文件夹打开终端或者 git bash，运行以下命令</p><ul><li>安装hexo：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>如果安装失败就用管理员权限重新打开命令框，再用上面的命令安装<br>完成安装以后初始化配置</p><ul><li>初始化配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>如果运行 hexo init 显示要在空文件夹运行的报错，那就随便找个空文件夹运行 hexo init，在出现克隆失败的报错以后，输入 n 不在重试， git 会将 hexo 的初始化文件直接复制到这个空文件夹里面，此时将空文件夹中的初始化文件复制粘贴到博客目录下即可</p><ul><li>为 Hexo 博客安装一个名为 hexo-deployer-git 的插件，用来实现一键部署到 Git 仓库：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>安装好以后就可以在命令框本地启动博客看看效果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ul><li>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看 Hexo 博客网站初始界面</li></ul><h3 id="Butterfly-主题"><a href="#Butterfly-主题" class="headerlink" title="Butterfly 主题"></a>Butterfly 主题</h3><ul><li>安装Butterfly主题<br>在你的 Hexo 根目录里运行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><ul><li>配置Butterfly主题 修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><ul><li>安装插件 如果你没有 pug 以及 stylus 的渲染器，请下载安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="进行SEO-优化"><a href="#进行SEO-优化" class="headerlink" title="进行SEO 优化"></a><em>进行SEO 优化</em></h4><ul><li>配置文章链接转数字或字母</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>需要在_config.yml文件中将：<br>permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;<br>修改为<br>permalink: posts&#x2F;:abbrlink.html</p><ul><li>在底部添加  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">alg: crc32      # Algorithm used to calc abbrlink. Support crc16(default) and crc32</span><br><span class="line">rep: hex        # Representation of abbrlink in URLs. Support dec(default) and hex</span><br></pre></td></tr></table></figure></li><li>配置本地搜索依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><ul><li>配置本地搜索<br>在_config.yml文件中添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: all</span><br><span class="line">content: true</span><br></pre></td></tr></table></figure></li><li>添加看板娘</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure><ul><li>添加自己喜欢的模型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save live2d-weight-model-koharu</span><br></pre></td></tr></table></figure><p>这样本地博客就搭建好了</p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程，Hexo，butterFly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>欢迎使用 <a href="https://hexo.io/">Hexo</a>! 查看文档 <a href="https://hexo.io/docs/">documentation</a> 以获取更多信息. 如果您在使用 Hexo 时遇到任何问题，您可以在故障排除中找到答案 <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> 也可以在 GitHub 上询问我 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
